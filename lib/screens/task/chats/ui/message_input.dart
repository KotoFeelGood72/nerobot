import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:nerobot/components/ui/Inputs.dart';
import 'package:nerobot/constants/app_colors.dart';

class MessageInput extends StatefulWidget {
  final String chatId; // ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ `chats`
  final String orderId; // –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ order_id

  const MessageInput({super.key, required this.chatId, required this.orderId});

  @override
  State<MessageInput> createState() => _MessageInputState();
}

class _MessageInputState extends State<MessageInput> {
  final _controller = TextEditingController();

  Future<void> _sendMessage() async {
    final text = _controller.text.trim();
    if (text.isEmpty) return;

    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')),
      );
      return;
    }

    final ts = DateTime.now().millisecondsSinceEpoch;
    final msg = <String, dynamic>{
      'chat': widget.chatId,
      'order_id': widget.orderId,
      'text': text, // üëà —Ç–µ–ø–µ—Ä—å –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è exactly `text`
      'sender': user.uid,
      'date_time': ts,
    };

    try {
      // 1. –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è `messages`
      await FirebaseFirestore.instance.collection('messages').add(msg);

      // 2. –¥—É–±–ª–∏—Ä—É–µ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç —á–∞—Ç–∞, —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–Ω—É—Ç—Ä–∏ `chats`
      await FirebaseFirestore.instance
          .collection('chats')
          .doc(widget.chatId)
          .update({
            'messages': FieldValue.arrayUnion([msg]),
          });

      _controller.clear();
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: $e')));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(8),
      height: 80,
      child: Row(
        children: [
          Expanded(
            child: Inputs(
              controller: _controller,
              backgroundColor: AppColors.bg,
              textColor: Colors.black,
            ),
          ),
          IconButton(
            icon: const Icon(Icons.send, color: AppColors.violet),
            onPressed: _sendMessage,
          ),
        ],
      ),
    );
  }
}
